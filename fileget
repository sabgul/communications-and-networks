#!/usr/bin/python3
import sys
import re
import socket
import ipaddress

# Checks if correct arguments were entered
def getArguments():
    if len(sys.argv) != 5:
        return False, None, None

    if not '-n' in sys.argv:
        return False
    else:
        index_n =  sys.argv.index('-n')  
        if index_n == 2 or index_n == 4:
            return False, None, None
        else:
            nameserver = sys.argv[index_n + 1]

    if not '-f' in sys.argv:
        return False, None, None
    else:
        index_f = sys.argv.index('-f')
        if index_f == 2 or index_f == 4:
            return False, None, None
        else:
            surl = sys.argv[index_f + 1]             

    return True, nameserver, surl


# Checks validity of surl
def processSurl(surl):
    # TODO prerobit tuto prasacinu
    if re.match(r"^(fsp|FSP|fSP|FsP|FSp|Fsp|fSp|fsP)://([a-zA-Z]|[0-9]|[-_.])*/(.)*$", surl):
        temp = re.sub(r"^(fsp|FSP)://", '', surl)
        path = re.sub(r"^([a-zA-Z]|[0-9]|[-_.])*", '', temp)
        server = re.sub(r"/(.)*$", '', temp)
        return True, server, path

    else:
        return False, None, None


# Checks validity of nameserver (ip:port)
def processNameserver(nameserver):
    if re.match(r"^([0-9]|[.])*:([0-9])*$", nameserver):
        ip = re.sub(r":([0-9])*$",'',nameserver)
        port = re.sub(r"^([0-9]|[.])*:", '', nameserver)
        port = int(port)

        try:
            ipaddress.ip_address(ip)
        except:
            return False, None, None

        if not 0 < port <= 65535:
            return False, None, None

        return True, ip, port
    else:
        return False, None, None   


# The implementation of the GET request
def getRequest(path_surl, filename, createFile):
    tcpRequest = "GET " + path_surl + " FSP/1.0\r\nAgent: xgulci00\r\n" + "Hostname: " + server_surl + "\r\n\r\n" 
    tcpRequest = bytes(tcpRequest, 'utf-8')

    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as tcpSocket:
        tcpSocket.connect((received_ip, received_port))
        tcpSocket.sendall(tcpRequest)
        buffer = bytearray()
        while True:
            data = tcpSocket.recv(2048)
            if not data: break
            buffer.extend(data)
    
        tcpSocket.close()
    
    compare = buffer
    buffer = re.sub(b"^(FSP/1.0 Success\r\nLength:([ ]|[0-9]*)*\r\n\r\n)", b'', buffer)
    if compare == buffer:
        print("error: file not found or other error occured", file=sys.stderr)
        sys.exit(-1)
    
    compare = re.sub(b"^(FSP/1.0 Success\r\nLength:[ ]*)", b'', compare)
    compare = re.sub(b"(\r\n\r\n)+((.)*(\n)*)*", b'', compare)
    compare = compare.strip()

    compare = int(compare)
    length = int(len(buffer))
    if compare != length:
        print("error: whole file was not loaded", file=sys.stderr)
        sys.exit(-1)

    if createFile:
        file = open(filename, "wb")
        file.write(buffer)
        file.close()
        return None
    else:
        return buffer    


if __name__ == "__main__":
    validArguments, nameserver, surl = getArguments()

    if not validArguments:
        print("error: invalid arguments", file=sys.stderr)
        sys.exit(-1)

    else:
        validSurl, server_surl, path_surl = processSurl(surl) 
        if not validSurl:
            print("error: invalid surl", file=sys.stderr)
            sys.exit(-1)

        validNameserver, ip_nameserver, port_nameserver = processNameserver(nameserver)
        if not validNameserver:
            print("error: invalid nameserver", file=sys.stderr)
            sys.exit(-1)

filename = re.sub(r"^(.)*/", '',path_surl)
if filename == '*':
    getAll = True
else:
    getAll = False

if filename == 'index':
    path_surl = 'index'

# -------------------------
# --- UDP communication

clientSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

udpRequest = "WHEREIS " + server_surl + "\r\n"
udpRequest = bytes(udpRequest, 'utf-8')

try:
    clientSocket.settimeout(15)
    clientSocket.sendto(udpRequest, (ip_nameserver, port_nameserver))
    received_data, address = clientSocket.recvfrom(2048)
    clientSocket.close()
except:
    print("error: connection timeout", file=sys.stderr)
    sys.exit(-1)

messageCheck = received_data.decode("utf-8")
if not 'OK' in messageCheck:
    print("error: server not found", file=sys.stderr)
    sys.exit(-1)

received_data = received_data.decode("utf-8")
received_msg = re.sub(r"([0-9]|[.:])*", '', received_data)
temp = re.sub(r"^([a-zA-Z]|[ ])*",'', received_data)
received_ip = re.sub(r":([0-9])*$",'', temp)
received_port = re.sub(r"^([0-9]|[.])*:",'', temp)
received_port = int(received_port)

# -------------------------
# --- TCP communication

if getAll:
    buff = getRequest('index', None, False)
    buff = buff.decode("utf-8")
    files = buff.split('\r\n')

    for file in files:
        # Ignores folders created by MacOS
        if not '.DS_Store' in file:
            if file:
                subFilename = re.sub(r"^(.)*/", '', file)
                buff = getRequest(file, subFilename, True)

else:
    if not filename:
        print("error: invalid filename", file=sys.stderr)
        sys.exit(-1)
    else:
        buff = getRequest(path_surl, filename, True)      

# TODO precitat zadanie a zistit ako vypisovat chyby
# TODO prejst si vsetky mozne exceptions
# TODO co ked stahujem z podzlozky